
team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
team_name = CredentialsManager::AppfileConfig.try_fetch_value(:team_name)
app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
json_key_file = CredentialsManager::AppfileConfig.try_fetch_value(:json_key_file)

app_connect_key_id = ENV["APP_CONNECT_KEY_ID"]
app_connect_issuer_id = ENV["APP_CONNECT_ISSUER_ID"]
android_app_id = ENV["ANDROID_APP_ID"]
ios_app_id = ENV["IOS_APP_ID"]
application_version = ENV["APPLICATION_VERSION"]
keychain_password = ENV["FASTLANE_KEYCHAIN_PASSWORD"]

build_folder = "fastlane/builds"
fastlane_keychain_name = "fastlane"

platform :ios do
  desc "Increment Build number"
  lane :increment_build do
    latest_release = firebase_app_distribution_get_latest_release(
      app: ios_app_id,
      service_credentials_file: json_key_file,
    )
    puts "Latest release: #{latest_release.inspect}"

    xcodeproj_path = "ios/MobileApp.xcodeproj"
  
    if latest_release.nil?
      UI.error("No releases found in Firebase App Distribution.")
    else
      new_build = latest_release[:buildVersion].to_i + 1
      puts "Incrementing version code to: #{new_build}"
      increment_build_number(
        xcodeproj: xcodeproj_path,
        build_number: new_build
      )
      increment_version_number(
        xcodeproj: xcodeproj_path,
        version_number: application_version
      )
    end
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    type = options[:type]
    app_variant = variant == "prod" ? app_identifier : "#{app_identifier}.dev"

    api_key = app_store_connect_api_key(
      key_id: app_connect_key_id,
      issuer_id: app_connect_issuer_id,
      key_filepath: "fastlane/api_key.p8",
      duration: 1200
    )

    create_keychain(
      name: fastlane_keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 0
    )

    match(
      api_key: api_key,
      app_identifier: app_variant,
      type: type == "appstore" ? "appstore" : "adhoc",
      keychain_name: fastlane_keychain_name,
      keychain_password: keychain_password
    )

    get_provisioning_profile(
      api_key: api_key,
      team_id: team_id,
      app_identifier: app_variant,
      adhoc: type == "appstore" ? false : true,
    )
  end

  desc "Prepare new IOS build!"
  lane :build do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]
    puts("VARIANT: #{options[:variant]}")

    variant = options[:variant]
    type = options[:type]
    configuration = variant == "prod" ? "Release Prod" : "Release Dev"
    app_variant = variant == "prod" ? app_identifier : "#{app_identifier}.dev"

    certificates(variant: variant)
    increment_build(variant: variant)

    build_ios_app(
      scheme: "MobileApp",
      workspace: "ios/MobileApp.xcworkspace",
      export_method: type == "appstore" ? "app-store" : "ad-hoc",
      export_team_id: team_id,
      output_directory: build_folder,
      output_name: "#{app_variant}.ipa",
      configuration: configuration,
      skip_codesigning: true,
    )
  end

  desc "Firebase distribution of iOS"
  lane :distribution do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    bild_varinat = variant == "prod" ? "#{app_identifier}.ipa" : "#{app_identifier}.dev.ipa"

    firebase_app_distribution(
      app: ios_app_id,
      service_credentials_file: json_key_file,
      ipa_path: "#{build_folder}/#{bild_varinat}",
      groups: "qa-team",
      release_notes_file: "./CHANGELOG.md",
    )
  end

  desc "Upload to Test Flight"
  lane :beta do |options|

    variant = options[:variant]
    app_variant = variant == "prod" ? app_identifier : "#{app_identifier}.dev"
    bild_name = "#{app_variant}.ipa"

    api_key = app_store_connect_api_key(
			key_id: app_connect_key_id,
			issuer_id: app_connect_issuer_id,
      key_filepath: "fastlane/api_key.p8",
			duration: 1200
		)

		upload_to_testflight(
			api_key: api_key,
			app_identifier: app_variant,
			team_name: team_name,
			ipa: "#{build_folder}/#{bild_name}",
			skip_submission: true,
		)
  end

  desc "Push a Privacy Data for iOS"
  lane :update_privacy do
    upload_app_privacy_details_to_app_store(
      username: "username_for_app_connect",
      team_name: team_name,
      app_identifier: iapp_identifier,
      json_path: "path/to/app_privacy_details.json"
    )
  end

  desc "Upload release to App Store"
  lane :beta do |options|

    bild_name = "#{app_identifier}.ipa"

    api_key = app_store_connect_api_key(
			key_id: app_connect_key_id,
			issuer_id: app_connect_issuer_id,
      key_filepath: "fastlane/api_key.p8",
			duration: 1200
		)

    deliver(
      api_key: api_key,
      app_version: application_version,
      app_identifier: iapp_identifier,
      team_name: team_name,
      ipa: "#{build_folder}/#{bild_name}",
      overwrite_screenshots: true,
      force: true
    )
  end
end

platform :android do
  desc "Increment Build number"
  lane :increment_build do
    latest_release = firebase_app_distribution_get_latest_release(
      app: android_app_id,
      service_credentials_file: json_key_file,
    )
    puts "Latest release: #{latest_release.inspect}"

    gradle_path = "android/app/build.gradle"
  
    if latest_release.nil?
      UI.error("No releases found in Firebase App Distribution.")
    else
      new_build = latest_release[:buildVersion].to_i + 1
      puts "Incrementing version code to: #{new_build}"
      increment_version_code(
        gradle_file_path: gradle_path,
        version_code: new_build
      )
      increment_version_name(
        gradle_file_path: gradle_path,
        version_name: application_version
      )
    end
  end

  desc "Build a Release artifact (.aab)"
  lane :build do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    type = options[:type]
    android_dir = File.expand_path("../android")
    gradlew_path = File.join(android_dir, "gradlew")
    aap_output_variant = variant == "prod" ? "prodRelease" : "devRelease"
    apk_output_variant = variant == "prod" ? "prod/release" : "dev/release"
    bild_varinat = variant == "prod" ? "app-prod-release" : "app-dev-release"
    gradle_assemble_task =  variant == "prod" ? "assembleProdRelease" : "assembleDevRelease"
    gradle_bundle_task = variant == "prod" ? "bundleProdRelease" : "bundleDevRelease"

    increment_build(variant: variant)

    gradle(
      task: type == "APK" ? gradle_assemble_task : gradle_bundle_task,
      project_dir: android_dir,
      gradle_path: gradlew_path
    )

    fastlane_build_directory = File.join(Dir.pwd, "builds")

    FileUtils.mkdir_p(fastlane_build_directory)

    aab_file_path = File.join(Dir.pwd, "..", "android", "app", "build", "outputs", "bundle", aap_output_variant, "#{bild_varinat}.aab")
    apk_file_path = File.join(Dir.pwd, "..", "android", "app", "build", "outputs", "apk", apk_output_variant, "#{bild_varinat}.apk")

    build_to_copy = type == "APK" ? apk_file_path : aab_file_path

    FileUtils.cp(build_to_copy, fastlane_build_directory)

    puts "Build completed. .aab file saved in #{fastlane_build_directory}."
  end

  desc "Firebase distribution of Android"
  lane :distribution do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    bild_varinat = variant == "prod" ? "app-prod-release" : "app-dev-release"

    firebase_app_distribution(
      app: android_app_id,
      service_credentials_file: json_key_file,
      android_artifact_type: "APK",
      android_artifact_path: "#{build_folder}/#{bild_varinat}.apk",
      groups: "qa-team",
      release_notes_file: "./CHANGELOG.md",
    )
  end

  desc "Upload to Play Store beta"
  lane :beta do |options|
    raise ArgumentError, "build variant is required!" unless options[:variant]

    variant = options[:variant]
    bild_varinat = variant == "prod" ? "app-prod-release" : "app-dev-release"
    app_variant = variant == "prod" ? app_identifier : "#{app_identifier}.dev"

		upload_to_play_store(
			package_name: app_variant,
			track: "internal",
			version_name: application_version,
			aab: "#{build_folder}/#{bild_varinat}.aab",
			skip_upload_metadata: true,
			skip_upload_images: true,
			skip_upload_screenshots: true,
		)
  end

  desc "Upload release to Play Store"
  lane :release do |options|

		upload_to_play_store(
			package_name: app_identifier,
			track: "production",
			version_name: application_version,
			aab: "#{build_folder}/app-prod-release.aab"
		)
  end
end
